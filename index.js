require("dotenv").config();
const { Telegraf, Markup, session } = require("telegraf");
const path = require("path");
const ExcelJS = require("exceljs");
const {
  buttons,
  messages,
  errors,
  status,
} = require("./assets/models/constants");
const dbClient = require("./assets/models/dbConnection");
const {
  getUserCoins,
  startQuiz,
  sendNextQuestion,
  getDateString,
} = require("./assets/models/dbUtils");
const {
  checkRegistration,
  addUser,
  isAdmin,
} = require("./assets/models/registration");

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSessions = new Map();

const bot = new Telegraf(process.env.BOT_TOKEN);
// –ü–æ–¥–∫–ª—é—á–∞–µ–º session middleware —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PostgreSQL —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot.use(session());

let tempMenu = [[buttons.getCoins], [buttons.totalCoins], [buttons.lots]];
const userMenu = Markup.keyboard(tempMenu).resize();
const adminMenu = Markup.keyboard([
  ...tempMenu,
  [buttons.checkGoodDeeds],
  [buttons.statistics],
]).resize();

const subMenu = Markup.keyboard([
  [buttons.attendEvent],
  [buttons.goodDeedEvent],
  [buttons.quiz],
  [buttons.back],
]).resize();

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.start(async (ctx) => {
  const session = getSession(ctx.chat.id); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  session.currentAction = "registration";
  const { isRegistered, isAdminUser } = await checkRegistration(ctx);
  try {
    if (!isRegistered) {
      await ctx.reply(messages.notRegistered);
      return;
    }
    const finalMenu = isAdminUser ? adminMenu : userMenu;
    await ctx.reply(messages.welcome, finalMenu);
  } catch (err) {
    console.error(errors.userCheckError, err);
    ctx.reply(errors.userCheckError);
  }
});

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–∑ –ø–æ–¥–º–µ–Ω—é
bot.hears(buttons.back, async (ctx) => {
  const session = getSession(ctx.chat.id); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  session.currentAction = null;
  const isAdminUser = await isAdmin(ctx);
  const finalMenu = isAdminUser ? adminMenu : userMenu;
  await ctx.reply(messages.selectAction, finalMenu);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü–æ–ª—É—á–∏—Ç—å –¥–æ–±—Ä–æ–∫–æ–∏–Ω—ã"
bot.hears(buttons.getCoins, async (ctx) => {
  const session = getSession(ctx.chat.id); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  session.currentAction = null;
  await ctx.reply(messages.selectAction, subMenu);
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥–æ–±—Ä–æ–∫–æ–∏–Ω–æ–≤"
bot.hears(buttons.totalCoins, async (ctx) => {
  const totalCoins = await getUserCoins(ctx.from.username);
  const session = getSession(ctx.chat.id); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  session.currentAction = null;
  await ctx.reply(messages.totalCoins(totalCoins));
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–õ–æ—Ç—ã –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ"
bot.hears(buttons.lots, async (ctx) => {
  const session = getSession(ctx.chat.id); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  session.currentAction = null;
  const lots = await dbClient.query(
    "SELECT * FROM public.media_files ORDER BY id ASC"
  );

  for (const lot of lots.rows) {
    await ctx.replyWithPhoto(
      { source: lot.file_data },
      {
        caption: `${lot.title}\n\n${lot.description.replaceAll("/n", "\n")}`,
      }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±—Ä—ã—Ö –¥–µ–ª"
bot.hears(buttons.checkGoodDeeds, async (ctx) => {
  const session = getSession(ctx.chat.id); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  session.currentAction = null;
  const isAdminUser = await isAdmin(ctx);
  if (!isAdminUser) {
    await ctx.reply(messages.insufficientPermissions);
    return;
  }

  const goodDeeds = await dbClient.query(
    `SELECT * FROM public.good_deeds WHERE status = '${status.pending}' ORDER BY id ASC`
  );
  if (goodDeeds.rows.length === 0) {
    await ctx.reply(messages.noGoodDeeds);
  } else {
    for (const deed of goodDeeds.rows) {
      await ctx.replyWithPhoto(deed.photo_id, {
        caption: messages.goodDeedNotification(
          deed.telegram_login,
          deed.id,
          deed.description
        ),
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: buttons.confirmGoodDeed,
                callback_data: `confirm_${deed.id}`,
              },
              {
                text: buttons.rejectGoodDeed,
                callback_data: `reject_${deed.id}`,
              },
            ],
          ],
        },
      });
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
bot.action(/confirm_(\d+)/, async (ctx) => {
  const deedId = ctx.match[1];
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±—Ä–æ–º –¥–µ–ª–µ, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å telegram_login
    const deed = await dbClient.query(
      `SELECT telegram_login FROM public.good_deeds WHERE id = $1`,
      [deedId]
    );

    if (deed.rows.length === 0) {
      await ctx.reply(errors.goodDeedNotFound);
      return;
    }

    const telegramLogin = deed.rows[0].telegram_login;

    await dbClient.query(
      `UPDATE public.good_deeds SET status = '${status.successful}' WHERE id = $1`,
      [deedId]
    );
    await dbClient.query(
      `UPDATE public.users SET coins = coins + $1 WHERE LOWER(telegram_login) = LOWER($2)`,
      [30, telegramLogin]
    );

    try {
      // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      await ctx.deleteMessage();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
    }
    await ctx.reply(messages.confirmGoodDeed(deedId));
  } catch (err) {
    console.error(errors.confirmGoodDeedError, err);
    await ctx.reply(errors.confirmGoodDeedError);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
bot.action(/reject_(\d+)/, async (ctx) => {
  const deedId = ctx.match[1];
  try {
    await dbClient.query(
      `UPDATE public.good_deeds SET status = '${status.rejected}' WHERE id = $1`,
      [deedId]
    );
    try {
      // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      await ctx.deleteMessage();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
    }
    await ctx.reply(messages.rejectGoodDeed(deedId));
  } catch (err) {
    console.error(errors.rejectGoodDeedError, err);
    await ctx.reply(errors.rejectGoodDeedError);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
bot.hears(buttons.statistics, async (ctx) => {
  const session = getSession(ctx.chat.id); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  session.currentAction = null;
  const isAdminUser = await isAdmin(ctx);
  if (!isAdminUser) {
    await ctx.reply(messages.insufficientPermissions);
    return;
  }

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –∏ –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
    const result = await dbClient.query(`
      SELECT 
        SUM(volunteer_experience::integer) AS total_experience,
        SUM(coins) AS total_coins
      FROM 
        public.users;
    `);

    const totalExperience = result.rows[0].total_experience || 0;
    const totalCoins = result.rows[0].total_coins || 0;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    const statsMessage = `
      üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* üìä
      - –°—É–º–º–∞—Ä–Ω—ã–π –æ–ø—ã—Ç: ${totalExperience} –º–µ—Å—è—Ü–µ–≤
      - –û–±—â–∏–π –±–∞–ª–ª: ${totalCoins} –º–æ–Ω–µ—Ç
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await ctx.replyWithMarkdown(statsMessage);

    // –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ coins –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    const resultForExcel = await dbClient.query(`
  SELECT telegram_login, full_name, coins, volunteer_experience
  FROM public.users
  ORDER BY coins DESC;
`);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Excel-—Ñ–∞–π–ª–∞
    const workbook = new ExcelJS.Workbook();
    const worksheet1 = workbook.addWorksheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
    worksheet1.columns = [
      { header: "–õ–æ–≥–∏–Ω", key: "telegram_login", width: 20 },
      { header: "–§–ò–û", key: "full_name", width: 30 },
      { header: "–ë–∞–ª–ª—ã", key: "coins", width: 10 },
      { header: "–û–ø—ã—Ç", key: "volunteer_experience", width: 15 },
    ];

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
    resultForExcel.rows.forEach((user) => {
      worksheet1.addRow({
        telegram_login: user.telegram_login,
        full_name: user.full_name,
        coins: user.coins,
        volunteer_experience: user.volunteer_experience,
      });
    });

    // –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ used_codes
    const resultForCodes = await dbClient.query(`
  SELECT telegram_login, code_word, used_at
  FROM public.used_codes
  ORDER BY used_at DESC;
`);

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö used_codes
    const worksheet2 = workbook.addWorksheet("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã");

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ª–∏—Å—Ç–∞
    worksheet2.columns = [
      { header: "–õ–æ–≥–∏–Ω", key: "telegram_login", width: 20 },
      { header: "–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", key: "code_word", width: 30 },
      { header: "–í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", key: "used_at", width: 20 },
    ];

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
    resultForCodes.rows.forEach((code) => {
      worksheet2.addRow({
        telegram_login: code.telegram_login,
        code_word: code.code_word,
        used_at: new Date(code.used_at).toLocaleString("ru-RU", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        }),
      });
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    const filePath = "users_statistics.xlsx";
    await workbook.xlsx.writeFile(filePath);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.replyWithDocument({
      source: filePath,
      filename: "users_statistics.xlsx",
    });
  } catch (err) {
    console.error(errors.statisticsError, err);
    await ctx.reply(errors.statisticsError);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ó–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
bot.hears(buttons.attendEvent, async (ctx) => {
  const session = getSession(ctx.chat.id); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  session.currentAction = "attendEvent";
  await ctx.reply(messages.enterCodeWord);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–æ –¥–æ–±—Ä–æ"
bot.hears(buttons.quiz, async (ctx) => {
  const session = getSession(ctx.chat.id); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  session.currentAction = "quiz";
  try {
    const finished = await startQuiz(ctx);
    if (finished?.byAlready) {
      return ctx.reply(messages.quizRetry);
    }
    if (finished?.byNonQuiz) {
      return ctx.reply(messages.noQuestions);
    }
  } catch (err) {
    ctx.reply(errors.startQuizError);
  } finally {
    session.currentAction = null;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on("callback_query", async (ctx) => {
  if (!ctx.session) {
    return;
  }
  const userAnswer = ctx.callbackQuery.data;
  const quiz = ctx.session.quiz;
  if (!quiz) {
    return;
  }
  const currentQuestion = quiz.questions[quiz.currentQuestionIndex];
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
  if (userAnswer === currentQuestion.correct_answer) {
    quiz.correctAnswersCount++;
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  quiz.currentQuestionIndex++;
  await ctx.reply(`${messages.quezVariant} ${userAnswer}`);
  try {
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await ctx.deleteMessage();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
  }
  await sendNextQuestion(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ó–∞ –ø–æ—Å—Ç –≤ —Å–µ—Ç–∏"
bot.hears(buttons.goodDeedEvent, async (ctx) => {
  const session = getSession(ctx.chat.id); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    const currentDate = getDateString();
    const telegramLogin = ctx.from.username;
    const resultCount = await dbClient.query(
      `SELECT COUNT(*) FROM good_deeds 
        WHERE LOWER(telegram_login) = LOWER($1) 
        AND DATE(created_at) = $2`,
      [telegramLogin, currentDate]
    );

    const deedCount = +resultCount.rows[0].count;
    if (deedCount >= 10) {
      session.currentAction = null;
      return ctx.reply(messages.maxGoodDeeds);
    }
    session.currentAction = "uploadGoodDeed";
    await ctx.reply(messages.uploadGoodDeedPhoto);
  } catch (err) {
    await ctx.reply(errors.startUploadError);
    session.currentAction = null;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–±—Ä–æ–∫–æ–∏–Ω–æ–≤
bot.on("message", async (ctx) => {
  const session = getSession(ctx.chat.id); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const telegramLogin = ctx.from.username;
  if (session.currentAction === "attendEvent") {
    if (!ctx.message.text) {
      await ctx.reply(errors.invalidCodeWord);
      return;
    }
    const codeWord = ctx.message.text.trim();

    try {
      const codeResult = await dbClient.query(
        `SELECT * FROM public.codes WHERE LOWER(code_word) = LOWER($1)`,
        [codeWord]
      );

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–¥
      if (codeResult.rows.length > 0) {
        const validCode = codeResult.rows[0].code_word;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–¥ —Ä–∞–Ω–µ–µ
        const usedCodeResult = await dbClient.query(
          `SELECT * FROM public.used_codes 
            WHERE LOWER(telegram_login) = LOWER($1) 
            AND code_word = $2
            LIMIT 1`,
          [telegramLogin, validCode]
        );

        if (usedCodeResult.rows.length === 0) {
          // –ö–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          const total = 50;
          await dbClient.query(
            `UPDATE public.users SET coins = coins + $1 WHERE LOWER(telegram_login) = LOWER($2)`,
            [total, telegramLogin]
          );

          const totalCoins = await getUserCoins(telegramLogin);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–¥–∞
          await dbClient.query(
            `INSERT INTO public.used_codes (telegram_login, code_word) VALUES (LOWER($1), $2)`,
            [telegramLogin, validCode]
          );

          session.currentAction = null;
          const photoPath = path.join(
            __dirname,
            "assets/images",
            `coin_${total}.png`
          );
          await ctx.replyWithPhoto(
            {
              source: photoPath,
            },
            { caption: messages.totalCoins(totalCoins) }
          );
        } else {
          // –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          await ctx.reply(errors.codeAlreadyUsed);
        }
      } else {
        // –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        await ctx.reply(errors.invalidCodeWord);
      }
    } catch (err) {
      console.error(errors.userCheckError, err);
      await ctx.reply(errors.userCheckError);
    }
    return;
  }

  if (session.currentAction === "uploadGoodDeed") {
    const photo = ctx.message.photo;

    if (!photo || photo.length === 0) {
      // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
      await ctx.reply(errors.photoRequired);
      return;
    }

    const photoId = photo[photo.length - 1].file_id;
    const caption = ctx.message.caption || messages.emptyDeedDescription;

    try {
      const user = await dbClient.query(
        `SELECT telegram_login FROM public.users WHERE LOWER(telegram_login) = LOWER($1) LIMIT 1`,
        [telegramLogin]
      );

      if (!user.rows.length) {
        throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }

      const normalizedLogin = user.rows[0].telegram_login;

      await dbClient.query(
        `INSERT INTO public.good_deeds (telegram_login, photo_id, description, status) VALUES (LOWER($1), $2, $3, '${status.pending}')`,
        [normalizedLogin, photoId, caption]
      );

      session.currentAction = null;
      await ctx.reply(messages.goodDeedRegistered);
    } catch (err) {
      console.error(errors.photoUploadError, err);
      await ctx.reply(errors.photoUploadError);
    }
    return;
  }

  if (session.currentAction === "registration") {
    try {
      const { fullName, isAdminUser } = await addUser(ctx);
      if (fullName) {
        finalMenu = isAdminUser ? adminMenu : userMenu;
        session.currentAction = null;
        await ctx.reply(messages.registered, finalMenu);
      }
    } catch (err) {}
    return;
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getSession(chatId) {
  if (!userSessions.has(chatId)) {
    userSessions.set(chatId, { currentAction: null });
  }
  return userSessions.get(chatId);
}

bot.launch().then(() => {
  console.log(messages.launch);
});
